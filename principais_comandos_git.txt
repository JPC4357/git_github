Olá, esse projeto ensina você a usar o Git.

*** PRINCIPAIS COMANDOS GIT ***

git --version (consultar a versão)
git init (inicializar um repositório git vazio, na branch master)
git add (manda os arquivos para a área de staging. basicamente, prepara os arquivos para serem enviados para a cloud)
git status (verifica o status dos arquivos no repositório)
git commit -m "mensagem" (usado para efetuar a atualização no arquivo LOCALMENTE. A mensagem serve para descrever o que aquela mudança representa)
git branch -M "main" (uma maneira de renomear a branch que eu estou)
git remote add origin "url" (criar a conexão do repositório do github com o repositório local)
git push -u origin "branchname" (enviar as mudanças para o github)

Testando uma nova linha

git reflog (comando que mostra o histórico de versões)
git reset -- hard (id_da_versao) (para voltar à uma versão específica. Deve-se usar o ID da versão)

git branch (listar as branches disponíveis)
git branch "nome_nova_branch" (criar uma nova branch)
A branch atual ficará marcada em verde e com um asterisco
git checkout "nome_branch" (utilizado para trocar de branch)

Para trazer as atualizações de uma dada branch para a branch principal, devemos usar o comando merge.

Primeiro deve-se entrar na branch principal
Depois usar o comando:
git merge "nome_da_outra_branch"

IMPORTANTE: sempre rodar o comando git pull na branch principal antes de se fazer o comando merge com outras branches... Isso garante que a versão dos arquivos na branch principal é a mais atual.


Para fazer com que um arquivo ou pasta não sejam carregados para o GitHub, precisamos usar o gitignore

Comando:
touch .gitignore

Colocar os nomes das pastas e arquivos a serem ignorados.

RESUMÃO

git init --> inicializa um novo repositório
git add . --> adiciona TODOS os arquivos ao próximo commit. Pode-se colocar apenas os arquivos desejados.
git status --> verificar o status atual do repositório git
git commit -m "mensagem do commit" --> cria um novo commit com uma mensagem
git push --> envia as atualizações para a nuvem na branch atualmente ativa
git branch --> permite listar e ver qual branch está ativa no momento
git checkout nome-da-branch --> permite mudar para uma branch já existente
git checkout -b "nome da branch de origem" "nome da nova branch" --> permite mudar e criar uma nova branch com base em outra
git merge "branch a receber merge" --> permite fazer o merge da branch ativa atualmente com outra branch
git pull --> atualiza a branch atualmente ativa
